# to use list, tuple, dict ... in Python 3.7 and 3.8
from __future__ import annotations

from typing import Protocol, Union

class IntArrayLike(Protocol):
    def __getitem__(self, index) -> int: ...

Hashable = Union[str, bytes, bytearray, memoryview, IntArrayLike]

def hash(key: Hashable, seed: int = 0, signed: bool = True) -> int: ...
def hash_from_buffer(key: Hashable, seed: int = 0, signed: bool = True) -> int: ...
def hash64(key: Hashable, seed: int = 0, signed: bool = True) -> (int, int): ...
def hash128(key: Hashable, seed: int = 0, signed: bool = True) -> int: ...
def hash_bytes(key: Hashable, seed: int = 0, signed: bool = True) -> bytes: ...

class Hasher:
    def __init__(self, seed: int = 0) -> None: ...
    def update(self, input: Hashable) -> None: ...
    def sintdigest(self) -> int: ...
    def uintdigest(self) -> int: ...
    @property
    def digest_size(self) -> int: ...

@final
class mmh3_32(Hasher): ...
