---
name: Wheel-Builder

on:
  workflow_call:
    inputs:
      pypi-repository:
        required: false
        type: string
    secrets:
      pypi-username:
        required: false
      pypi-password:
        required: false

permissions: {}

jobs:
  build_wheels:
    name: Build wheel for ${{ matrix.archs }} (runs on ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-24.04]
        archs: [x86_64, i686, aarch64, ppc64le, s390x]
        build: [manylinux, musllinux]
        include:
          - os: windows-2022
            platform: windows
            archs: AMD64
          - os: windows-2022
            platform: windows
            archs: x86
          - os: windows-2022
            platform: windows
            archs: ARM64
          - os: macos-13
            platform: macos
            archs: x86_64
          - os: macos-14
            platform: macos
            archs: arm64
          - os: macos-14
            platform: macos
            archs: universal2
          - os: macos-14
            platform: ios
            archs: arm64_iphoneos
            test-command: python -m pytest
          - os: macos-14
            platform: ios
            archs: arm64_iphonesimulator
            test-command: python -m pytest
          - os: macos-13
            platform: ios
            archs: x86_64_iphonesimulator
            test-command: python -m pytest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v3
      - name: Build wheels
        uses: pypa/cibuildwheel@v3.1.1
        with:
          output-dir: wheelhouse
        env:
          CIBW_BUILD: "{cp39,cp310,cp311,cp312,cp313}-${{ matrix.build }}*"
          CIBW_PLATFORM: ${{ matrix.platform || 'auto' }}
          CIBW_ARCHS: ${{ matrix.archs }}
          CIBW_BUILD_FRONTEND: "build"
          CIBW_TEST_REQUIRES: "pytest"
          CIBW_TEST_COMMAND: ${{matrix.test-command || 'pytest {project}'}}
          CIBW_TEST_SKIP: "*-win_arm64"
      - uses: actions/upload-artifact@v4
        with:
          name: Wheel-${{ matrix.os }}-${{ matrix.platform }}-${{ matrix.build }}${{ matrix.archs }}
          path: ./wheelhouse/*.whl
  build_sdist:
    name: Build a source distribution
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
      - name: Build sdist
        run: |
          python -m pip install --upgrade pip
          pip install setuptools build
          python -m build --sdist
      - name: Test building from the source distribution
        shell: bash
        run: |
          pip install ".[test,type]"
          pip uninstall -y mmh3
          python -m pip install dist/*.tar.gz
          python -m pytest
          mypy --strict tests
      - uses: actions/upload-artifact@v4
        with:
          path: dist/*.tar.gz
  publish:
    if: ${{ inputs.pypi-repository == 'pypi' || inputs.pypi-repository == 'testpypi'}}
    name: "Upload to PyPI/Test PyPI"
    runs-on: ubuntu-24.04
    needs: [build_wheels, build_sdist]
    steps:
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
      - name: Set up built items
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine
      - name: "Publish"
        env:
          TWINE_USERNAME: ${{ secrets.pypi-username }}
          TWINE_PASSWORD: ${{ secrets.pypi-password }}
        run: |
          twine upload --repository ${{ inputs.pypi-repository }} dist/*
